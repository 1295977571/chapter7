{'TMP': 'C:\\Users\\ADMINI~1\\AppData\\Local\\Temp', 'PYTHONIOENCODING': 'GBK', 'COMPUTERNAME': 'ND--20170106KTX', 'VS140COMNTOOLS': 'D:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\Tools\\', 'USERDOMAIN': 'ND--20170106KTX', 'NVTOOLSEXT_PATH': 'C:\\Program Files\\NVIDIA Corporation\\NvToolsExt\\', 'PSMODULEPATH': 'C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\', 'ANDROID_HOME': 'W:\\SDK', 'COMMONPROGRAMFILES': 'C:\\Program Files (x86)\\Common Files', 'CUDA_PATH_V8_0': 'C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 60 Stepping 3, GenuineIntel', 'VBOX_MSI_INSTALL_PATH': 'D:\\Program Files\\Oracle\\VirtualBox\\', 'PROGRAMFILES': 'C:\\Program Files (x86)', 'PROCESSOR_REVISION': '3c03', 'NVCUDASAMPLES8_0_ROOT': 'C:\\ProgramData\\NVIDIA Corporation\\CUDA Samples\\v8.0', 'PATH': 'C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\bin;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\libnvvp;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v7.5\\bin;C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v7.5\\libnvvp;;;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;D:\\Program Files\\Git\\cmd;D:\\Program Files\\TortoiseSVN\\bin;C:\\Program Files (x86)\\Windows Kits\\8.1\\Windows Performance Toolkit\\;C:\\Program Files\\Microsoft SQL Server\\120\\Tools\\Binn\\;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Program Files\\Microsoft SQL Server\\110\\Tools\\Binn\\;D:\\Program Files\\nodejs\\;D:\\Python27;D:\\Python27\\Scripts;D:\\IDE\\Java\\jdk1.8.0_101\\bin;D:\\Program Files\\TortoiseSVN\\bin;D:\\IDE\\gradle\\gradle-3.0\\bin;C:\\Users\\Administrator\\AppData\\Roaming\\npm;C:\\Users\\Administrator\\AppData\\Local\\Programs\\Fiddler', 'PYTHONUNBUFFERED': '1', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'COMSPEC': 'C:\\Windows\\system32\\cmd.exe', 'TEMP': 'C:\\Users\\ADMINI~1\\AppData\\Local\\Temp', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_ARCHITECTURE': 'x86', 'PATH_BAK': 'C:\\Users\\Administrator\\AppData\\Roaming\\npm;D:\\Python27;D:\\Python27\\Scripts;D:\\IDE\\Java\\jdk1.8.0_101\\bin;D:\\Program Files\\TortoiseSVN\\bin;D:\\IDE\\gradle\\gradle-3.0\\bin', 'ANDROID_SDK': 'W:\\SDK', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'LOCALAPPDATA': 'C:\\Users\\Administrator\\AppData\\Local', 'HOMEPATH': '\\Users\\Administrator', 'VS120COMNTOOLS': 'D:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\Common7\\Tools\\', 'JAVA_HOME': 'D:\\IDE\\Java\\jdk1.8.0_101', 'PROGRAMW6432': 'C:\\Program Files', 'USERNAME': 'Administrator', 'LOGONSERVER': '\\\\ND--20170106KTX', 'SYSTEMROOT': 'C:\\Windows', 'WINDOWS_TRACING_FLAGS': '3', 'PROGRAMDATA': 'C:\\ProgramData', 'CUDA_PATH': 'C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0', 'PYTHONPATH': 'E:\\PycharmProjects\\untitled3', 'NVCUDASAMPLES_ROOT': 'C:\\ProgramData\\NVIDIA Corporation\\CUDA Samples\\v8.0', 'NVCUDASAMPLES7_5_ROOT': 'D:\\ProgramData\\NVIDIA Corporation\\CUDA Samples\\v7.5', 'MOZ_PLUGIN_PATH': 'C:\\Program Files\\Foxit Software\\Foxit Reader\\plugins\\', 'SESSIONNAME': 'Console', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'CUDA_PATH_V7_5': 'C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v7.5', 'FP_NO_HOST_CHECK': 'NO', 'WINDIR': 'C:\\Windows', 'WINDOWS_TRACING_LOGFILE': 'C:\\BVTBin\\Tests\\installpackage\\csilogfile.log', 'HOMEDRIVE': 'C:', 'SYSTEMDRIVE': 'C:', 'PYCHARM_HOSTED': '1', 'NUMBER_OF_PROCESSORS': '8', 'APPDATA': 'C:\\Users\\Administrator\\AppData\\Roaming', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_ARCHITEW6432': 'AMD64', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'OS': 'Windows_NT', 'PUBLIC': 'C:\\Users\\Public', 'ANDROID_SDK_HOME': 'W:\\SDK', 'USERPROFILE': 'C:\\Users\\Administrator'}